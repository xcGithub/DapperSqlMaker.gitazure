<#@ include file=".\SchemaReader.ttinclude" #>
<#+  

Tables LoadTables()
{ 

	WriteLine("// This file was automatically generated by the Dapper.SimpleCRUD T4 Template");
	WriteLine("// Do not make changes directly to this file - edit the template instead");
	WriteLine("// ");
	WriteLine("// The following connection settings were used to generate this file");
	WriteLine("// ");
	WriteLine("//     Connection String : `{0}`", ConnectionString); 
	WriteLine("");

    //DbProviderFactory _factory ;
	try
	{
		// _factory = DbProviderFactories.GetFactory(ProviderName);
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

	try
	{
		Tables result;
		
		SchemaReader reader= new SqlServerSchemaReader();
		result=reader.ReadSchema(ConnectionString, TableFilter);
		
		for (int i=result.Count-1; i>=0; i--)
		{
			if (SchemaName!=null && string.Compare(result[i].Schema, SchemaName, true)!=0)
			{
				result.RemoveAt(i);
				continue;
			}
			if (!IncludeViews && result[i].IsView)
			{
				result.RemoveAt(i);
				continue;
			}
		}

		

		var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$");
		foreach (var t in result)
		{
			t.ClassName = ClassPrefix + t.ClassName + ClassSuffix;
			foreach (var c in t.Columns)
			{
				c.PropertyName = rxClean.Replace(c.PropertyName, "_$1");

				// Make sure property name doesn't clash with class name
				if (c.PropertyName == t.ClassName)
					c.PropertyName = "_" + c.PropertyName;
			}
		}

		    return result;
	}
	catch (Exception x)
	{
		var error=x.Message.Replace("\r\n", "\n").Replace("\n", " ");
		Warning(string.Format("Failed to read database schema - {0}", error));
		WriteLine("");
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("// Failed to read database schema - {0}", error);
		WriteLine("// -----------------------------------------------------------------------------------------");
		WriteLine("");
		return new Tables();
	}

        
}


class SqlServerSchemaReader : SchemaReader
{
	private	string _connstr {get;set;}
	// SchemaReader.ReadSchema
	
	public override Tables ReadSchema(string connstr, string tableFilter)
	//public override Tables ReadSchema(DbConnection connection, DbProviderFactory factory)
	{
		_connstr = connstr;
		var result=new Tables();
		 
		//pull the tables in a reader 
        using (IDataReader rdr = ExecuteReader(TABLE_SQL + tableFilter)) // 
        {
            while (rdr.Read())
            {
                Table tbl=new Table();
				tbl.Name=rdr["TABLE_NAME"].ToString();
				tbl.Schema=rdr["TABLE_SCHEMA"].ToString();
				tbl.IsView=string.Compare(rdr["TABLE_TYPE"].ToString(), "View", true)==0;
				tbl.CleanName=CleanUp(tbl.Name);
				if(tbl.CleanName.StartsWith("tbl_")) tbl.CleanName = tbl.CleanName.Replace("tbl_",""); 
				if(tbl.CleanName.StartsWith("tbl")) tbl.CleanName = tbl.CleanName.Replace("tbl",""); 
				tbl.CleanName = tbl.CleanName.Replace("_","");
				tbl.ClassName=  tbl.CleanName; //Singularize(RemoveTablePrefixes(tbl.CleanName)); //该方法去掉表s后缀

				result.Add(tbl);
            }
        } 

		foreach (var tbl in result)
		{
			tbl.Columns=LoadColumns(tbl);
		            
			// Mark the primary key
			// string PrimaryKey=GetPK(tbl.Schema, tbl.Name);
			// var pkColumn=tbl.Columns.SingleOrDefault(x=>x.Name.ToLower().Trim()==PrimaryKey.ToLower().Trim());
			// if(pkColumn!=null)
			// {
			//  	pkColumn.IsPK=true;
			// }
		}
	    

		return result;
	}
	 

	List<Column> LoadColumns(Table tbl)
	{
		var result=new List<Column>();
		using (IDataReader rdr = ExecuteReader(COLUMN_SQL
			, new SqlParameter("@tableName",tbl.Name) 
			// , new SqlParameter("@schemaName",tbl.Schema) 
		))
		{
			while(rdr.Read())
			{
				Column col=new Column();
				col.Name=rdr["ColumnName"].ToString();
				col.PropertyName=CleanUp(col.Name);
				col.PropertyType=GetPropertyType(rdr["DataType"].ToString());
				col.IsNullable=rdr["IsNullable"].ToString()=="YES";
			    // col.IsAutoIncrement=((int)rdr["IsIdentity"])==1;
				col.IsAutoIncrement=rdr["IsIdentity"] == "YES";
			    col.IsPK = rdr["IsPK"].ToString() == "YES";
				col.ColumnDesc = rdr["ColumnDesc"].ToString();
				result.Add(col);
			}
		}

		return result;
	}

	// string GetPK(string schema, string table){
	// 	string sql=@"SELECT COL_NAME(ic.OBJECT_ID, ic.column_id) AS ColumnName
	// 				FROM   sys.indexes AS i
	// 					INNER JOIN sys.index_columns  AS ic
	// 					ON  i.OBJECT_ID = ic.OBJECT_ID
	// 					AND i.index_id = ic.index_id
	// 				WHERE  i.is_primary_key = 1 
	// 					AND OBJECT_SCHEMA_NAME (ic.OBJECT_ID) = @schemaName
	// 					AND OBJECT_NAME(ic.OBJECT_ID) = @tableName";
	// 
	// 	
	// 
	// 	var result=ExecuteScalar(sql 
	// 	, new SqlParameter("@tableName",table) 
	// 	, new SqlParameter("@schemaName",schema) );
	// 
	// 	if(result!=null)
	// 		return result.ToString();    
	// 	
	// 	return "";
	// }
	
	string GetPropertyType(string sqlType)
	{
		string sysType="string";
		switch (sqlType) 
		{
			case "bigint":
				sysType = "long";
				break;
			case "smallint":
				sysType= "short";
				break;
			case "int":
				sysType= "int";
				break;
			case "uniqueidentifier":
				sysType=  "Guid";
				 break;
			case "smalldatetime":
			case "datetime":
			case "date":
			case "time":
				sysType=  "DateTime";
				  break;
			case "float":
				sysType="double";
				break;
			case "real":
				sysType="float";
				break;
			case "numeric":
			case "smallmoney":
			case "decimal":
			case "money":
				sysType=  "decimal";
				 break;
			case "tinyint":
				sysType = "byte";
				break;
			case "bit":
				sysType=  "bool";
				   break;
			case "image":
			case "binary":
			case "varbinary":
			case "timestamp":
				sysType=  "byte[]";
				 break;
			case "geography":
				sysType = "Microsoft.SqlServer.Types.SqlGeography";
				break;
			case "geometry":
				sysType = "Microsoft.SqlServer.Types.SqlGeometry";
				break;
		}
		return sysType;
	}



	const string TABLE_SQL=@"SELECT *
		FROM  INFORMATION_SCHEMA.TABLES
		WHERE (TABLE_TYPE='BASE TABLE' OR TABLE_TYPE='VIEW') ";
	
	const string COLUMN_SQL = @" SELECT  
			字段序号   = a.colorder,
			ColumnName = a.name, -- 字段名 
			IsIdentity = case when COLUMNPROPERTY( a.id,a.name,'IsIdentity')=1 then 'YES'else 'NO' end, -- 自增标识
			IsPK       = case when exists(SELECT 1 FROM sysobjects where xtype='PK' and parent_obj=a.id and name in (
							 SELECT name FROM sysindexes WHERE indid in( SELECT indid FROM sysindexkeys WHERE id = a.id AND colid=a.colid))) then 'YES' else 'NO' end, -- 主键
			DataType   = b.name, -- 类型 
			长度       = COLUMNPROPERTY(a.id,a.name,'PRECISION'),
			小数位数   = isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0),
			IsNullable = case when a.isnullable=1 then 'YES'else 'NO' end, -- 允许空
			默认值     = isnull(e.text,''),
			ColumnDesc = isnull(g.[value],'') -- 字段说明
		FROM  syscolumns a
		left join  systypes b on  a.xusertype=b.xusertype
		inner join sysobjects d on a.id=d.id and  d.name<>'dtproperties' 
		left join  syscomments e on  a.cdefault=e.id
		left join sys.extended_properties g on a.id=G.major_id and a.colid=g.minor_id   
		where  d.name= @tableName    --查询指定表
		order by a.id,a.colorder ";

    //  const string COLUMN_SQL=@"SELECT 
    //  		TABLE_CATALOG AS [Database],
    //  		TABLE_SCHEMA AS Owner, 
    //  		TABLE_NAME AS TableName, 
    //  		COLUMN_NAME AS ColumnName, 
    //  		ORDINAL_POSITION AS OrdinalPosition, 
    //  		COLUMN_DEFAULT AS DefaultSetting, 
    //  		IS_NULLABLE AS IsNullable, DATA_TYPE AS DataType, 
    //  		CHARACTER_MAXIMUM_LENGTH AS MaxLength, 
    //  		DATETIME_PRECISION AS DatePrecision,
    //  		COLUMNPROPERTY(object_id('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'), COLUMN_NAME, 'IsIdentity') AS IsIdentity,
    //  		COLUMNPROPERTY(object_id('[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'), COLUMN_NAME, 'IsComputed') as IsComputed
    //  	FROM  INFORMATION_SCHEMA.COLUMNS
    //  	WHERE TABLE_NAME=@tableName AND TABLE_SCHEMA=@schemaName
    //  	ORDER BY OrdinalPosition ASC";
	 
	
		
		string RemoveTablePrefixes(string word)
		{
			var cleanword = word;
			if(cleanword.StartsWith("tbl_")) cleanword = cleanword.Replace("tbl_",""); 
			if(cleanword.StartsWith("tbl")) cleanword = cleanword.Replace("tbl",""); 
			cleanword = cleanword.Replace("_","");
			return cleanword;
		}
		
		string Singularize(string word)
{
	var singularword = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us")).Singularize(word);
	return singularword;
}

        /// <summary>
        /// 查询
        /// </summary>
        public SqlDataReader ExecuteReader(string sql, params SqlParameter[] sPars)
        {
            SqlConnection conn = new SqlConnection(_connstr);
            using (SqlCommand cmd = new SqlCommand(sql, conn))
            {
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddRange(sPars);
				try
				{
					conn.Open();
					return cmd.ExecuteReader(CommandBehavior.CloseConnection);
				}
				catch(Exception ex)
				{
					conn.Close();
					conn.Dispose();
					throw ex;
				}
                    
            }
        }

		/// <summary>
        /// 查询首行首列
        /// </summary>
        public object ExecuteScalar(string sql, params SqlParameter[] sPars)
        {
            using (SqlConnection conn = new SqlConnection(_connstr))
            {
                using (SqlCommand cmd = new SqlCommand(sql, conn))
                {
                    cmd.Parameters.AddRange(sPars);
                    try
                    {
						conn.Open();
                        return cmd.ExecuteScalar();
                    }
                    catch {
                        return null;
                    }
                }
            }
        }
        

}

#>
<#@ template hostspecific="True" #>
<#@ include file="EF.Utility.CS.ttinclude"#>   
<#@ include file="..\SchemaReader.ttinclude" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #> 

<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Configuration" #> 
<#@ import namespace="System.Data.SqlClient" #>
<#@ output extension="txt"#>  

<# 
ConnectionString = @"server=192.168.0.151;database=dbintranet;uid=www;pwd=AoJi@2017$Dev;";  // 连接串
// SqlToModelStr = " select tint = 1, tstring = '1', tdouble = 1.21 ";
SqlToModelStr = @"SELECT  'EVUS附件', BFC_IsCrossDomain, BFC_FilePathIP, '/EVUSFile/', 'http://www2:7000/EVUSFile/', 
		   BFC_FileSuffix, BFC_FileMaxSize, BFC_IsMultipleFile, BFC_OrderFlag, BFC_SetID, BFC_SetDate, BFC_IsDel
	 FROM  tblStudentStatus_BusinessFileConfig where BFC_ID=17";
SqlToModelName = "Test";

var tbl = LoadSqlTable();
tbl.Name = SqlToModelName;	
tbl.ClassName = tbl.Name;	

Namespace = "xxo.Single.TestModel"; 
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this); // 多文件生成

#>

<# fileManager.StartHeader(); #>
using System; 

namespace <#=Namespace #>
{
<# fileManager.EndBlock(); #>
<# fileManager.StartNewFile(tbl.Name+".cs");  #>
    /// <summary>
    /// <#=tbl.Name#> 
    /// </summary>
	// [Table("[<#=tbl.Name#>]")]
	public partial class <#=tbl.ClassName#>
	{ 

<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c)
{#>
	<# if (tbl.PK!=null && tbl.PK.Name==col.PropertyName) { #>
	// [Key]
	<#}#>
	public virtual <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<#}#>
	}
	 

<# fileManager.StartFooter(); #>
} // namespace
<# fileManager.EndBlock(); #>
<# fileManager.Process(true); #> 
 



<#+ 

	
 
 
Table LoadSqlTable()
{
	Table result = new Table();
	DataTable tb = ExecuteTable(SqlToModelStr);
	var colList = new List<Column>(); 
	foreach (DataColumn item in tb.Columns)
	{
		Column col = new Column();
	    col.Name = item.ColumnName;
	    col.PropertyName = CleanUp(col.Name);
	    col.PropertyType = item.DataType.Name.ToString();
		colList.Add(col);
	}
	result.Columns = colList;
	result.Name = "Test";
	result.ClassName = result.Name;
	return result;
}

DataTable ExecuteTable(string sql, params SqlParameter[] sPars)
{
	DataTable dt = new DataTable();
    using (SqlDataAdapter sda = new SqlDataAdapter(sql, ConnectionString))
    {
        sda.SelectCommand.Parameters.AddRange(sPars);
        sda.SelectCommand.CommandType = CommandType.Text;
        try
        {
            sda.Fill(dt);
        }
        catch {
            return null;
        }
    }
    return dt;
}

#>